Итак, представим что команда программистов закончила работу над одним из приложений. Это будет простое приложение, в котором гости и посетители сайта смогут оставлять
свои сообщения. Были созданы нужные образы Docker и было решено развернуть всё это в кластер Kubernetes. Что требуется:


BACKEND ЧАСТЬ

Создать deployment под названием redis-master для мастера Redis

a) Количество реплик - 1
b) Имя контейнера должно быть my-redis-master. Образ используется redis
c) Requests и limits для cpu - 100m, для памяти - 150Mi
d) Порт контейнера - дефолтный для redis (6379)


Создать service под названием redis-master-svc. Port и targetPort соответствуют дефолтному значению - 6379



Создать deployment для redis воркеров под названием redis-worker

a) Количество реплик - 2
b) Контейнер должен называться worker-redis и браться из образа gcr.io/google-samples/gb-redisslave:v3
c) Ресурсы такие же как у redis-master
d) Опишите переменную GET_HOST_FROM и её значение = dns
e) Порт контейнера - 6379

Создать service с названием redis-worker-svc по принципу мастера 




FRONTEND ЧАСТЬ

Создайте deployment с названием my-front

a) Количество реплик - 3
b) Имя контейнера должно быть my-php-front и образ для контейнера - gcr.io/google-samples/gb-frontend:v4
c) Requests для CPU - 100m, для memory - 100Mi
d) Опишите переменную GET_HOST_FROM и её значение = dns
e) Порт контейнера - 80


Создайте service с названием front-svc


Далее сделайте так, чтобы приложение было доступно из мира. Будете делать это через service LB или же через ingress - неважно. Главное результат. Удачи! 




